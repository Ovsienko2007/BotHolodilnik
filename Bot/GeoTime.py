import BD
from main import *

# –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
@dp.message(and_f(F.location, filter))
async def geo(message: Message):
    lat = "%.4f"%float(message.location.latitude)
    long = "%.4f"%float(message.location.longitude)
    BD.geo_update(message.from_user.id, str(long), str(lat))
    await message.answer("–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ ‚úî")

# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
@dp.edited_message(and_f(F.location, filter))
async def geo(message: Message):
    lat = "%.4f"%float(message.location.latitude)
    long = "%.4f"%float(message.location.longitude)
    BD.geo_update(message.from_user.id, str(long), str(lat))

# –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç "–¥–æ–º–∞" –∏–∑ —Ñ–∞–π–ª–∞
def home():
    try:
        with open('home.txt', 'r') as f:
            ge = f.readlines()
            ge[0]=ge[0][:-1]
        return list(map(float, ge))
    except:
        return []

# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /home
def Home(message: Message):
    return message.text == '/home'

# —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ "–¥–æ–º–∞"
@dp.message(and_f(Home, filter))
async def home_com(message: Message):
    c=BD.geo(message.from_user.id)
    if c!=('No', 'No'):
        with open('home.txt', 'a') as f:  # —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            pass
        with open('home.txt', 'r+') as f:  # –≤–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
            f.writelines("\n".join(c))
        await message.answer('–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è "–î–æ–º–∞" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚úî')
    else:
        await message.answer('–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è "–î–æ–º–∞" –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚ùå\n\n'
                             '<i>–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫—É –¥–æ–º–∞ –Ω–∞–¥–æ, –ø—Ä–µ–∂–¥–µ —Å–∫–∏–Ω—É—Ç—å –±–æ—Ç—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é</i>',
                             parse_mode='HTML')

# –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ "–¥–æ–º–∞" –∏–∑ —Ñ–∞–π–ª–∞
@dp.message(and_f(F.text.regexp(r'–î–æ–º üè†'), filter))
async def home1(message: Message):
    ge = home()
    if ge!=[]:
        await bot.send_location(chat_id=message.chat.id, latitude=ge[0], longitude=ge[1])
    else:
        await message.answer('–¢–æ—á–∫–∞ –¥–æ–º–∞ –Ω–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ üòû\n\n'
                             '<i>–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ—á–∫—É "–î–æ–º–∞"</i>',
                             parse_mode='HTML')

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–î–æ–º–∞"
def geo123(user):
    us=BD.geo(user)
    ho=home()
    if BD.geo(user)==('No', 'No'): # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        return True
    elif ho[0]-0.0002<float(us[0])<ho[0]+0.0002 and ho[1]-0.0002<float(us[1])<ho[1]+0.0002: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ–º–∞
        return True
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ–º–∞
        return False


# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /time
def Time(message: Message):
    return message.text == '/time'
@dp.message(and_f(Time , filter))
async def ti(message: Message):
    # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
    flag1 = True
    flag2 = True
    # –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –≤—Ä–µ–º–µ–Ω–∏
    while True:
        # –ø–µ—Ä–µ–Ω–æ—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –¥—Ä—É–≥—É—é
        now = datetime.datetime.now()  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        BD.new_srok(str((int(now.strftime('%d'))-1))+'.'+now.strftime('%m.%Y'))
        if flag1 and int(now.strftime('%H')) != 0 and message.from_user.id==userid[0]:
            BD.update_prod_srok_2()
            flag1=False

        if BD.products_srock() != [] and int(now.strftime('%H')) >= 9 and int(now.strftime('%H')) <= 21 and flag2\
                and geo123(message.from_user.id) :
            await message.answer('–ü–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ãüòû \n\n'
                                 '<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã" , —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö</i>',
                                 parse_mode='HTML')
            flag2=False
        if int(now.strftime('%H')) == 0:
            flag2=True

        await asyncio.sleep(60)