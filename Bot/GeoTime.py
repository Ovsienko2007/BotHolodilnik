from main import *


@dp.message(F.location)
@dp.edited_message(F.location)
async def geo(message: Message):
    if message.from_user.id in userid:
        lat = "%.4f"%float(message.location.latitude)
        long = "%.4f"%float(message.location.longitude)
        BD.geo_update(message.from_user.id, str(long), str(lat))

# –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç "–¥–æ–º–∞" –∏–∑ —Ñ–∞–π–ª–∞
def home():
    with open('home.txt', 'r') as f:
        ge = f.readlines()
        ge[0]=ge[0][:-1]
    return list(map(float, ge))

# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /home
def Home(message: Message):
    return message.text == '/home'

# —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ "–¥–æ–º–∞"
@dp.message(Home)
async def home_com(message: Message):
    if message.from_user.id == userid1:
        with open('home.txt', 'a') as f:  # —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            pass
        with open('home.txt', 'r+') as f:  # –≤–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
            c=BD.geo(message.from_user.id)
            f.writelines("\n".join(c))

# –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ "–¥–æ–º–∞" –∏–∑ —Ñ–∞–π–ª–∞
@dp.message(F.text=="–î–æ–º")
async def home1(message: Message):
    if message.from_user.id in userid:
        ge = home()
        await bot.send_location(chat_id=message.chat.id, latitude=ge[0], longitude=ge[1])

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–î–æ–º–∞"
def geo123(user):
    us=list(map(float, BD.geo(user)))
    ho=home()
    if BD.geo(userid1)==('No', 'No'): # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        return True
    elif ho[0]-0.0002<us[0]<ho[0]+0.0002 and ho[1]-0.0002<us[1]<ho[1]+0.0002: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ–º–∞
        return True
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ–º–∞
        return False


# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /time
def Time(message: Message):
    return message.text == '/time'
@dp.message(Time)
async def ti(message: Message):
    # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
    flag1 = True
    flag2 = True

    # –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –≤—Ä–µ–º–µ–Ω–∏
    while True:
        now = datetime.datetime.now() # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

        if now.strftime('%H:%M')=="00:00" and flag1:
            # –ü–µ—Ä–µ–Ω–æ—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –¥—Ä—É–≥—É—é
            BD.new_srok(now.strftime('%d.%m.%Y'))
            flag1=False

        elif now.strftime('%H:%M')!="00:00" and not flag1: # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞
            flag1 = True

        if BD.products_srock() != [] and int(now.strftime('%H')) >= 9 and int(now.strftime('%H')) <= 21 and flag2\
                and geo123(message.from_user.id) :
            await message.answer('–ü–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ãüòû \n\n'
                                 '<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã" , —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö</i>',
                                 parse_mode='HTML')
            flag2=False
        elif int(now.strftime('%H')) == 0 and not flag2:
            flag2=True

        await asyncio.sleep(1)