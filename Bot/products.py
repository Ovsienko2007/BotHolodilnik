from main import *

print(3)
# —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@dp.message(F.text.regexp(r'–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.+'))
async def pr_prods(message: Message):
    if message.from_user.id in userid:
        c = BD.products_srock()
        if c != []:
            button = InlineKeyboardButton(
                text='–£–¥–∞–ª–∏—Ç—å –≤—Å—ë',
                callback_data='ALL')
            knopki = InlineKeyboardMarkup(
                inline_keyboard=[[button]]
            )
            a = 1
            ans = '<b>__–ï—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ãüòû__</b>\n'
            for i in c:
                ans += f'{a})  {i[1]}: {i[2]};\n'
                a += 1


            await message.answer(text=ans, reply_markup=knopki, parse_mode='HTML')
        else:
            await message.answer(text="–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç üëç")

# –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
def pr():
    products = []
    for i in BD.products():
        button = InlineKeyboardButton(
            text=f'{i[1]}: {i[2]}',
            callback_data=str(i[0]))
        products.append([button])

    return products

@dp.message(F.text.regexp(r'–ü—Ä–æ–¥—É–∫—Ç—ã.+'))
async def product(message: Message):
    if message.from_user.id in userid:
        print(3)
        if BD.products()!=[]:
            # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            ans='<b>____________–ü—Ä–æ–¥—É–∫—Ç—ãüçû_____________</b>\n'
            c=1
            for i in BD.products():
                ans+=f'{c})  {i[1]}: {i[2]};\n'
                c+=1
            if BD.products_srock()!=[]:
                c=1
                ans+='\n<b>__–ï—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ãüòû__</b>\n'
                for i in BD.products_srock():
                    ans += f'{c})  {i[1]}: {i[2]};\n'
                    c += 1
            # –æ—Ç–ø—Ä–∞–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await message.answer(text=ans, parse_mode='HTML')
        else:
            await message.answer("–ü—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç ‚ùå")

# —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@dp.message(F.text.regexp(r'–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.+'))
async def process_start_command(message: Message):
    if message.from_user.id in userid:
        # —Å–±–æ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –∫–Ω–æ–ø–æ–∫
        if pr()!=[]:
            in_keyboard = InlineKeyboardMarkup(
                inline_keyboard=pr()
            )
            await message.answer(
                text='–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å',
                reply_markup=in_keyboard)
        else:
            await message.answer(
                text='–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚ùå')

@dp.message(F.text.regexp(r'.+\d\d\.\d\d\.\d{4}'))
async def product_new (message: Message):
    if message.from_user.id in userid:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        t=message.text
        srok=re.findall(r'\d\d\.\d\d\.\d{4}',t)
        srok=srok[-1]
        prod = re.sub(r'\d\d\.\d\d\.\d{4}', '', t)
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        BD.new(prod,srok)
        await message.answer("–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω ‚úî")