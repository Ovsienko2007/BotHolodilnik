from main import *

# —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@dp.message(and_f(F.text.regexp(r'–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã üóë'), filter))
async def pr_prods(message: Message):
  c = BD.products_srock()
  if c != []:
      button = InlineKeyboardButton(
          text='–£–¥–∞–ª–∏—Ç—å –≤—Å—ë',
          callback_data='ALL')
      knopki = InlineKeyboardMarkup(
          inline_keyboard=[[button]]
      )
      a = 1
      ans = '<b>__–ï—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ãüòû__</b>\n'
      for i in c:
          ans += f'{a})  {i[1]}: {i[2]};\n'
          a += 1


      await message.answer(text=ans, reply_markup=knopki, parse_mode='HTML')
  else:
      await message.answer(text="–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç üëç")

# –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
def pr():
    products = []
    for i in BD.products():
        button = InlineKeyboardButton(
            text=f'{i[1]}: {i[2]}',
            callback_data=str(i[0]))
        products.append([button])

    return products


def pr2():
    products = []
    for i in BD.products():
        if i[-1]!="0":
            button = InlineKeyboardButton(
            text=f'{i[1]}: {i[2]}',
            callback_data=str(-i[0]))
            products.append([button])

    return products

@dp.message(and_f(F.text.regexp(r'–ü—Ä–æ–¥—É–∫—Ç—ã üçû'), filter))
async def product(message: Message):
    print(3)
    if BD.products()!=[]:
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        ans='<b>____________–ü—Ä–æ–¥—É–∫—Ç—ãüçû_____________</b>\n'
        c=1
        for i in BD.products():
            ans+=f'{c})  {i[1]}: {i[2]};\n'
            c+=1
        if BD.products_srock()!=[]:
            c=1
            ans+='\n<b>__–ï—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ãüòû__</b>\n'
            for i in BD.products_srock():
                ans += f'{c})  {i[1]}: {i[2]};\n'
                c += 1
        # –æ—Ç–ø—Ä–∞–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(text=ans, parse_mode='HTML')
    else:
        await message.answer("–ü—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç ‚ùå")

# —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@dp.message(and_f(F.text.regexp(r'–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚ùå'), filter))
async def process_start_command(message: Message):
    # —Å–±–æ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –∫–Ω–æ–ø–æ–∫
    if pr()!=[]:
        in_keyboard = InlineKeyboardMarkup(
            inline_keyboard=pr()
        )
        await message.answer(
            text='–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å',
            reply_markup=in_keyboard)
    else:
        await message.answer(
            text='–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚ùå')


@dp.message(and_f(F.text.regexp(r'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ üîÑ'), filter))
async def process_start_command(message: Message):
    # —Å–±–æ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –∫–Ω–æ–ø–æ–∫
    if pr()!=[]:
        in_keyboard = InlineKeyboardMarkup(
            inline_keyboard=pr2()
        )
        await message.answer(
            text='–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–∞ –≤—Å–∫—Ä—ã—Ç–∞ —É–ø–∞–∫–æ–≤–∫–∞ üî™',
            reply_markup=in_keyboard)
    else:
        await message.answer(
            text='–ü—Ä–æ–¥—É–∫—Ç–æ–≤ c —É–ø–∞–∫–æ–≤–∫–æ–π –Ω–µ—Ç ‚ùå')

def sroki1(srok):
    now = datetime.datetime.now()

    d=int(srok[:2])
    m=int(srok[3:5])
    y=int(srok[6:])
    if int(now.strftime('%Y')) < y:
        return True
    elif int(now.strftime('%Y')) == y:
        if int(now.strftime('%m')) < m:
            return True
        elif int(now.strftime('%m')) == m:
            if int(now.strftime('%d')) <= d:
                return True
            else:
                return False
        else:
            return False
    else:
        return False
def sroki2(srok):

    d=int(srok[:2])
    m=int(srok[3:5])
    y=int(srok[6:])
    try:
        date = datetime.datetime(y,m,d)
        return True
    except:
        return False

@dp.message(and_f(F.text.regexp(r'.+\d\d\.\d\d\.\d{4}\s?\d*'), filter))
async def product_new (message: Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    t=message.text
    a = re.search(r'\d\d\.\d\d\.\d{4}', t)
    srok=re.findall(r'\d\d\.\d\d\.\d{4}',t)
    srok=srok[-1]

    prodsr = re.sub(r'\d\d\.\d\d\.\d{4}', '', t)
    sr=prodsr[a.start()+1:]
    prod=prodsr[:a.start()-1]
    if sroki2(srok):
        if sroki1(srok):
            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            if sr!="":
                BD.new(prod,srok,int(sr))
            else:
                BD.new(prod, srok)
            await message.answer("–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω ‚úî")
        else:
            await message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω ‚ùå\n\n"
                                 "<i>–ü—Ä–æ–¥—É–∫—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω\n</i>"
                                 "<i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞</i>",
                                 parse_mode='HTML')
    else:
        await message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω ‚ùå\n\n"
                             "<i>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n</i>"
                             "<i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞</i>",
                             parse_mode='HTML')
@dp.message(and_f(F.text.regexp(r'.+\d+'), filter))
async def product_new (message: Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    t=message.text
    print(t)
    srok=re.findall(r'\d+',t)
    srok=srok[-1]
    prod = re.sub(r'\d+', '', t)[:-1]
    await message.answer("–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω ‚úî")
    BD.new_prod_srok_2(prod,srok)


def prod_er(message: Message):
    return message.text[0]!="/"

@dp.message(and_f(~F.text.regexp(r'–î–æ–º.+'), ~F.location, prod_er, filter))
async def prod_er_ans (message: Message):
    await message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω ‚ùå\n\n"
                         "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±—Ä–∞–∑—Ü—É\n"
                         "–û–±—Ä–∞–∑–µ—Ü: \n<i>–ü—Ä–æ–¥—É–∫—Ç 23.12.2023</i>",
                         parse_mode='HTML')